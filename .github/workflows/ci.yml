name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}/

jobs:
  # Test OCR Service
  test-ocr-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ocr-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-ocr-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-ocr-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run OCR service tests
      run: |
        python -m pytest test_ocr_processor.py -v --cov=ocr_processor --cov-report=xml --cov-report=term-missing

    - name: Upload OCR coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./ocr-service/coverage.xml
        flags: ocr-service
        name: ocr-service-coverage

  # Test AI Service
  test-ai-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-ai-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-ai-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run AI service tests
      run: |
        python -m pytest test_ai_processor.py -v --cov=ai_processor --cov-report=xml --cov-report=term-missing

    - name: Upload AI coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./ai-service/coverage.xml
        flags: ai-service
        name: ai-service-coverage

  # Test MCP Server
  test-mcp-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mcp-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-mcp-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-mcp-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run MCP server tests
      run: |
        python -m pytest test_magic_trick_mcp_server.py -v --cov=magic_trick_mcp_server --cov-report=xml --cov-report=term-missing

    - name: Upload MCP coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./mcp-server/coverage.xml
        flags: mcp-server
        name: mcp-server-coverage

  # Test Backend (existing comprehensive tests)
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-backend-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-backend-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        python run_tests.py --coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Build Docker Images
  build-images:
    needs: [test-ocr-service, test-ai-service, test-mcp-server, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [ocr-service, ai-service, mcp-server, backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}${{ env.IMAGE_PREFIX }}${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [ocr-service, ai-service, mcp-server, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}${{ env.IMAGE_PREFIX }}${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Integration Tests
  integration-tests:
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up --build --abort-on-container-exit
        docker-compose -f docker-compose.yml -f docker-compose.test.yml down

  # Deploy to staging (optional)
  deploy-staging:
    needs: [integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add your staging deployment commands here
        # This could involve updating container images, running migrations, etc.

  # Deploy to production
  deploy-production:
    needs: [integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploy to production environment"
        # Add your production deployment commands here

  # Notify on completion
  notify:
    needs: [test-ocr-service, test-ai-service, test-mcp-server, test-backend, build-images]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test-ocr-service.result == 'success' && needs.test-ai-service.result == 'success' && needs.test-mcp-server.result == 'success' && needs.test-backend.result == 'success' && needs.build-images.result == 'success' }}
      run: |
        echo "✅ All tests passed and images built successfully!"
        # Add notification logic (Slack, email, etc.)

    - name: Notify failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ Some tests failed or build failed!"
        # Add failure notification logic